#!/bin/bash
_ABOUT="Zhongwen Compose"
_USAGE="Usage: zhocompose [-h] CHARACTERS"
_DATAFILE="/usr/share/zhotools/zhocompose.sqlite" #modified from cangjie table of cns11643
_1COVER="b w"
_NOCOVER="wg nwf jwj"
_3COVER="vni kni hni nhi"

if test -z "$1" -o "$1" == "-h" ; then
  echo "$_ABOUT"
  echo "$_USAGE"
  exit
else
  _INPUT=$1
fi

_MAXINPUT=$((${#_INPUT}-1))
declare -a _CODE
_STROKES=0
for i in `seq 0 $_MAXINPUT` ; do
  _CHAR=${_INPUT:$i:1}
  if test $i -eq $_MAXINPUT ; then
    _CHARDATA=$( sqlite3 -separator " " $_DATAFILE "SELECT comp_code, strokes FROM compose WHERE sqrword = '$_CHAR' ORDER BY regular DESC LIMIT 1;") # default: regular = T
  else
    _CHARDATA=$( sqlite3 -separator " " $_DATAFILE "SELECT comp_code, strokes FROM compose WHERE sqrword = '$_CHAR' ORDER BY regular LIMIT 1;") # default: regular = F
  fi
  _CODE[$i]=${_CHARDATA% *}
  _STROKE=${_CHARDATA#* }
  if test ${#_STROKE} -gt 0 ; then
    _STROKES=$(($_STROKES+$_STROKE))
  fi
done

function _get {
  _LEN=$((${#1}-1))
  if test $_LEN -lt $2 ; then
    echo -n $1
  elif test $2 -eq 1 ; then
    echo -n ${1:0:1}
  else
    if test $2 -gt 1 ; then
      echo -n ${1:0:$2-1}
    fi
    _LEN_L1=${1:$_LEN:1}
    _LEN_L2=${1:$_LEN-1:1}
    _LEN_L321=${1:$_LEN-2:3}
    if test $_LEN -gt 0 -a "${_1COVER/$_LEN_L2/}" != "$_1COVER" -a "${_NOCOVER/$_LEN_L1/}" = "$_NOCOVER" ; then
      echo -n $_LEN_L2
    elif test $_LEN -gt 1 -a "${_3COVER/$_LEN_L321/}" != "$_3COVER" ; then
      echo -n "n"
    else
      echo -n $_LEN_L1
    fi
  fi
}

_KEYS=""
_KEY_=""
case $_MAXINPUT in
  0) _KEYS="${_CODE[0]}"
     ;;
  1) _KEYS=`_get "${_CODE[0]}" 2``_get "${_CODE[1]}" 3`
     _KEY_=`_get "${_CODE[0]}" 4`
     _KEY_=${_KEY_:0:3}`_get "${_CODE[1]}" 0`
     ;;
  2) if test $((${#_CODE[1]}-1)) -eq 0 ; then
       _KEYS=`_get "${_CODE[0]}" 2``_get "${_CODE[1]}" 1``_get "${_CODE[2]}" 2`
     else
       _KEYS=`_get "${_CODE[0]}" 2``_get "${_CODE[1]}" 2``_get "${_CODE[2]}" 0`
     fi
     _KEY_=`_get "${_CODE[0]}" 1``_get "${_CODE[1]}" 0``_get "${_CODE[2]}" 3`
     ;;
  3) _KEYS=`_get "${_CODE[0]}" 1``_get "${_CODE[1]}" 0``_get "${_CODE[2]}" 1``_get "${_CODE[3]}" 0`
     _KEY_=`_get "${_CODE[0]}" 1``_get "${_CODE[1]}" 0``_get "${_CODE[2]}" 2``_get "${_CODE[3]}" 0`
     ;;
  4)
     _KEYS=`_get "${_CODE[0]}" 1``_get "${_CODE[1]}" 1``_get "${_CODE[2]}" 1``_get "${_CODE[3]}" 1``_get "${_CODE[4]}" 0`
     ;;
esac
if test -n "$_KEY_" -a "$_KEYS" != "$_KEY_" ; then
  _KEYS+=" $_KEY_"
fi

_OUTPUT=""
_OUTPUTS=""
for _KEY in $_KEYS ; do
  _CHARS=$( sqlite3 $_DATAFILE "SELECT sqrword FROM compose WHERE comp_code = '$_KEY';")
  _OUTPUTS="$_OUTPUTS $_CHARS"
  for _CHAR in $_CHARS ; do
    _STROKE=$( sqlite3 $_DATAFILE "SELECT strokes FROM compose WHERE sqrword = '$_CHAR' ORDER BY regular DESC LIMIT 1;" )
    if test "$_STROKE" -eq "$_STROKES" -o "$_STROKE" -eq 0 ; then
      _OUTPUT+=" $_CHAR"
    fi
  done
done
if test -z "$_OUTPUT" ; then
  _OUTPUT=$_OUTPUTS
fi

echo $_OUTPUT | sed 's/^ //'
